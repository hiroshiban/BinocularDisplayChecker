function img=GenerateWallpaperImages(ress,colors,linewidth,save_flg,scrID)

% Generates Wallpapers for display position coregistration.
% function img=GenerateWallpaperImages(ress,:colors,:linewidth,:save_flg,:scrID)
% (: is optional)
%
% This functions generates 3 (mono, left-eye, and right-eye) wallpaper iamges
% that can be used for diplay position coregistration.
% Especially in binocular stimulus (e.g. stereograms, or binocular rivalry) presentation in neuroimaging,
% we often have to present left and right eye images onto two displays separately (and we may also use
% an additional display for a console). In such a situation, a strict positional adjustment of the two
% displays will be necessary for accurate binocular fusion and precise measurements. The wallpaper(s)
% generated by this function can support these adjustment by presenting guidelines on the screen.
%
% [example]
% >> img=GenerateWallpaperImages([1920,1080],[],3,1,1);
% >> imshow(img{1});
%
% [input]
% ress     : display resolutions, a 1 x 2 matrix.
%            [width, height] in pixels.
% colors   : (optional) RGB colors of background, monocular_image, left-eye_image, and right-eye image.
%            a 4 X 3(RGB,0-255) matrix.
%            [ 127, 127, 127; 255, 255, 255; 255,   0, 255;   0, 255, 255] by default.
% linewidth: (optional) line width in pixels, 3 by default.
% save_flg : (optional) whether saving the generated wallpapers. [0|1].
%            if set to 1, the generated image will be seved as
%            image_{mono_white|left_magenda|right_cyan}_(width)x(height).png
%            0 by default.
% scrID    : (optional) Screen ID used in opening OffScreenWindow with PTB3. 1 by default.
%
% [output]
% img      : generated wallpaper images, a cell structure.
%            img{1} -- monocular wallpaper
%            img{2} -- leght-eye wallpaper
%            img{3} -- right-eye wallpaper
%
% [dependency]
% Psychtoolbox 3 (PTB3) is required.
% The Screen window of the PTB3 toolbox is used in drawing the wallpaper images internally.
% ref: http://psychtoolbox.org/
%
%
% Created    : "2021-06-16 13:41:53 ban"
% Last Update: "2021-06-16 23:49:13 ban"

%% check the input variables.
if nargin<1 || isempty(ress), help(mfilename()); return; end
if nargin<2 || isempty(colors), colors=[127,127,127; 255,255,255; 255,0,255; 0,255,255]; end
if nargin<3 || isempty(linewidth), linewidth=3; end
if nargin<4 || isempty(save_flg), save_flg=0; end
if nargin<5 || isempty(scrID), scrID=1; end

if numel(ress)~=2, error('ress should be a 1 x 2 matrix, [width, height] in pixels. check the input variable.'); end
if size(colors,1)~=4 || size(colors,2)~=3
  error('color should be 4(background,mono,left,right) x 3(RGB) matrix. check the input variable.');
end

%% configure psychtoolbox

if isempty(which('Screen')), error('The function, Screen, is not found. Install Psychtoolbox first.'); end

%% configure plotting

% display message
fprintf('generating wallpapers, [width, height]=[%d, %d] pixels...\n\n',ress(1),ress(2));

%% generating monocular/left-eye/right-eye images

% debug level, black screen during calibration
Screen('Preference', 'VisualDebuglevel', 0);

% open the PTB window
[winPtr,winRect]=Screen('OpenWindow',scrID,colors(1,:),CenterRect([0,0,ress(1),ress(2)],Screen('rect',scrID)));

% set OpenGL blend functions
Screen('BlendFunction', winPtr, GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);

% set the priority of this script to MAX
priorityLevel=MaxPriority(winPtr,'WaitBlanking');
Priority(priorityLevel);

% Select specific text font, style and size:
fontsize=76;
Screen('TextFont',winPtr, 'Arial');
Screen('TextSize',winPtr,fontsize);
Screen('TextStyle',winPtr,1);

Screen('Preference', 'TextRenderer', 1);
Screen('Preference', 'TextAntiAliasing', 1);

% line positions
LXY1=round([ 0,ress(1),        0,ress(1),            0,     ress(1),            0,     ress(1),            0,     ress(1),  1*ress(1)/4, 1*ress(1)/4,  2*ress(1)/4, 2*ress(1)/4,  3*ress(1)/4, 3*ress(1)/4;
             0,ress(2),  ress(2),      0,  1*ress(2)/4, 1*ress(2)/4,  2*ress(2)/4, 2*ress(2)/4,  3*ress(2)/4, 3*ress(2)/4,            0,     ress(2),            0,     ress(2),            0,     ress(2)]);

LXY2=round([ 0, ress(1)/2,  ress(1)/2,   ress(1),          0, ress(1)/2,  ress(1)/2,   ress(1);
             ress(2)/2, 0,          0, ress(2)/2,  ress(2)/2,   ress(2),    ress(2), ress(2)/2]);

% calculate the text boundary box position by rendering the dummy texts
[dummy1,dummy2,bboxL]=DrawFormattedText(winPtr,'LEFT','center','center',[0,0,0,0]);
[dummy1,dummy2,bboxR]=DrawFormattedText(winPtr,'RIGHT','center','center',[0,0,0,0]);
clear dummy1 dummy2;

%% image generation
img=cell(1,3);
for ii=1:1:3

  % background
  Screen('FillRect',winPtr,colors(1,:),winRect);

  % lines
  Screen('DrawLines',winPtr,LXY1,linewidth,colors(ii+1,:));
  Screen('DrawLines',winPtr,LXY2,linewidth,colors(ii+1,:));
  Screen('FrameOval',winPtr,colors(ii+1,:),CenterRect([0,0,ress(2),ress(2)],winRect),linewidth);
  Screen('FrameOval',winPtr,colors(ii+1,:),CenterRect(round([0,0,ress(2)/2,ress(2)/2]),winRect),linewidth);
  Screen('FrameOval',winPtr,colors(ii+1,:),CenterRect(round([0,0,ress(2)/4,ress(2)/4]),winRect),linewidth);
  Screen('FrameRect',winPtr,colors(ii+1,:),CenterRect([0,0,ress(1)/8,ress(2)/4],winRect)+[0,1.2*ress(2)/4,0,1.2*ress(2)/4],linewidth);
  Screen('FrameRect',winPtr,colors(ii+1,:),CenterRect([0,0,ress(1)/8,ress(2)/4],winRect)-[0,1.2*ress(2)/4,0,1.2*ress(2)/4],linewidth);

  % rectangles and texts
  if ii==1 % single display case
    Screen('FrameRect',winPtr,colors(2,:),CenterRect([0,0,ress(2)/4,ress(1)/10],winRect)+[ress(1)/4,0,ress(1)/4,0],linewidth);
    Screen('FrameRect',winPtr,colors(2,:),CenterRect([0,0,ress(2)/4,ress(1)/10],winRect)-[ress(1)/4,0,ress(1)/4,0],linewidth);
    Screen('FrameRect',winPtr,colors(2,:),CenterRect([0,0,ress(2)/4,ress(1)/10],winRect)+[ress(1)/4,ress(2)/4,ress(1)/4,ress(2)/4],linewidth);
    Screen('FrameRect',winPtr,colors(2,:),CenterRect([0,0,ress(2)/4,ress(1)/10],winRect)-[ress(1)/4,ress(2)/4,ress(1)/4,ress(2)/4],linewidth);
    Screen('FrameRect',winPtr,colors(2,:),CenterRect([0,0,ress(2)/4,ress(1)/10],winRect)+[ress(1)/4,-ress(2)/4,ress(1)/4,-ress(2)/4],linewidth);
    Screen('FrameRect',winPtr,colors(2,:),CenterRect([0,0,ress(2)/4,ress(1)/10],winRect)-[ress(1)/4,-ress(2)/4,ress(1)/4,-ress(2)/4],linewidth);

    Screen('DrawText',winPtr,'LEFT',ress(1)/4-[bboxL(3)-bboxL(1)]/2,3*ress(2)/8-[bboxL(4)-bboxL(2)]/2,colors(3,:));
    Screen('DrawText',winPtr,'LEFT',ress(1)/4-[bboxL(3)-bboxL(1)]/2,5*ress(2)/8-[bboxL(4)-bboxL(2)]/2,colors(3,:));

    Screen('DrawText',winPtr,'RIGHT',3*ress(1)/4-[bboxR(3)-bboxR(1)]/2,3*ress(2)/8-[bboxL(4)-bboxL(2)]/2,colors(4,:));
    Screen('DrawText',winPtr,'RIGHT',3*ress(1)/4-[bboxR(3)-bboxR(1)]/2,5*ress(2)/8-[bboxL(4)-bboxL(2)]/2,colors(4,:));
  elseif ii==2 % left-eye image
    Screen('FrameRect',winPtr,colors(3,:),CenterRect([0,0,ress(2)/4,ress(1)/10],winRect)+[ress(1)/4,0,ress(1)/4,0],linewidth);
    Screen('FrameRect',winPtr,colors(3,:),CenterRect([0,0,ress(2)/4,ress(1)/10],winRect)+[ress(1)/4,ress(2)/4,ress(1)/4,ress(2)/4],linewidth);
    Screen('FrameRect',winPtr,colors(3,:),CenterRect([0,0,ress(2)/4,ress(1)/10],winRect)+[ress(1)/4,-ress(2)/4,ress(1)/4,-ress(2)/4],linewidth);

    Screen('DrawText',winPtr,'LEFT',ress(1)/4-[bboxL(3)-bboxL(1)]/2,3*ress(2)/8-[bboxL(4)-bboxL(2)]/2,colors(3,:));
    Screen('DrawText',winPtr,'LEFT',ress(1)/4-[bboxL(3)-bboxL(1)]/2,5*ress(2)/8-[bboxL(4)-bboxL(2)]/2,colors(3,:));
  elseif ii==3 % right-eye image
    Screen('FrameRect',winPtr,colors(4,:),CenterRect([0,0,ress(2)/4,ress(1)/10],winRect)-[ress(1)/4,0,ress(1)/4,0],linewidth);
    Screen('FrameRect',winPtr,colors(4,:),CenterRect([0,0,ress(2)/4,ress(1)/10],winRect)-[ress(1)/4,ress(2)/4,ress(1)/4,ress(2)/4],linewidth);
    Screen('FrameRect',winPtr,colors(4,:),CenterRect([0,0,ress(2)/4,ress(1)/10],winRect)-[ress(1)/4,-ress(2)/4,ress(1)/4,-ress(2)/4],linewidth);

    Screen('DrawText',winPtr,'RIGHT',3*ress(1)/4-[bboxR(3)-bboxR(1)]/2,3*ress(2)/8-[bboxL(4)-bboxL(2)]/2,colors(4,:));
    Screen('DrawText',winPtr,'RIGHT',3*ress(1)/4-[bboxR(3)-bboxR(1)]/2,5*ress(2)/8-[bboxL(4)-bboxL(2)]/2,colors(4,:));
  end

  Screen('DrawingFinished',winPtr);
  Screen('Flip',winPtr);

  % exporting screen as an image
  img{ii}=Screen('GetImage',winPtr);
end % for ii=1:1:3

% clean up
Screen('CloseAll');
Priority(0);

% saving images
if save_flg
  %imwrite(img{1},sprintf('image_mono_white_%dx%d.png',ress(1),ress(2)),'png');
  %imwrite(img{2},sprintf('image_left_magenda_%dx%d.png',ress(1),ress(2)),'png');
  %imwrite(img{3},sprintf('image_right_cyan_%dx%d.png',ress(1),ress(2)),'png')
  imwrite(img{1},sprintf('image_mono_%dx%d.png',ress(1),ress(2)),'png');
  imwrite(img{2},sprintf('image_left_%dx%d.png',ress(1),ress(2)),'png');
  imwrite(img{3},sprintf('image_right_%dx%d.png',ress(1),ress(2)),'png')
end

fprintf('completed.\n');

return
